// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/apiserver/appcat/composition.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/crossplane/crossplane/apis/apiextensions/v1"
	gomock "github.com/golang/mock/gomock"
	internalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockcompositionProvider is a mock of compositionProvider interface.
type MockcompositionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockcompositionProviderMockRecorder
}

// MockcompositionProviderMockRecorder is the mock recorder for MockcompositionProvider.
type MockcompositionProviderMockRecorder struct {
	mock *MockcompositionProvider
}

// NewMockcompositionProvider creates a new mock instance.
func NewMockcompositionProvider(ctrl *gomock.Controller) *MockcompositionProvider {
	mock := &MockcompositionProvider{ctrl: ctrl}
	mock.recorder = &MockcompositionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcompositionProvider) EXPECT() *MockcompositionProviderMockRecorder {
	return m.recorder
}

// GetComposition mocks base method.
func (m *MockcompositionProvider) GetComposition(ctx context.Context, name string, options *v10.GetOptions) (*v1.Composition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComposition", ctx, name, options)
	ret0, _ := ret[0].(*v1.Composition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComposition indicates an expected call of GetComposition.
func (mr *MockcompositionProviderMockRecorder) GetComposition(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComposition", reflect.TypeOf((*MockcompositionProvider)(nil).GetComposition), ctx, name, options)
}

// ListCompositions mocks base method.
func (m *MockcompositionProvider) ListCompositions(ctx context.Context, options *internalversion.ListOptions) (*v1.CompositionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompositions", ctx, options)
	ret0, _ := ret[0].(*v1.CompositionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompositions indicates an expected call of ListCompositions.
func (mr *MockcompositionProviderMockRecorder) ListCompositions(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompositions", reflect.TypeOf((*MockcompositionProvider)(nil).ListCompositions), ctx, options)
}

// WatchCompositions mocks base method.
func (m *MockcompositionProvider) WatchCompositions(ctx context.Context, options *internalversion.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCompositions", ctx, options)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchCompositions indicates an expected call of WatchCompositions.
func (mr *MockcompositionProviderMockRecorder) WatchCompositions(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCompositions", reflect.TypeOf((*MockcompositionProvider)(nil).WatchCompositions), ctx, options)
}
